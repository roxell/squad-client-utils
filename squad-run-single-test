#!/usr/bin/python3
# -*- coding: utf-8 -*-
# vim: set ts=4
#
# Copyright 2022-present Linaro Limited
#
# SPDX-License-Identifier: MIT


import argparse
import logging
import squadutilslib
import os
import sys
from pathlib import Path
from squad_client.core.api import SquadApi

squad_host_url = "https://qa-reports.linaro.org/"
SquadApi.configure(cache=3600, url=os.getenv("SQUAD_HOST",squad_host_url))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)



def parse_args():
    parser = argparse.ArgumentParser(description="Get a local bisect script within SQUAD")

    parser.add_argument(
        "--group",
        required=True,
        help="squad group",
    )

    parser.add_argument(
        "--project",
        required=True,
        help="squad project",
    )

    parser.add_argument(
        "--build",
        required=True,
        help="squad build",
    )

    parser.add_argument(
        "--device-name",
        required=True,
        help="SQUAD's environment, like 'qemu-arm64'.",
    )

    parser.add_argument(
        "--build-name",
        required=True,
        help="SQUAD's build-name, which is tux's build_name, like 'gcc-12-lkftconfig'.",
    )

    parser.add_argument(
        "--suite-name",
        default="ltp-syscalls",
        help="SQUAD's build-name, which is tux's build_name, like 'ltp-syscalls' or 'kselftest-arm64'.",
    )

    parser.add_argument(
        "--test-name",
        required=True,
        help="SQUAD's build-name, which is tux's build_name, like 'fork13' or 'hackbench01'.",
    )

    parser.add_argument(
        "--debug",
        action="store_true",
        default=False,
        help="Display debug messages",
    )

    return parser.parse_args()


def run():
    args = parse_args()
    if args.debug:
        logger.setLevel(level=logging.DEBUG)

    build, build_cmdline = squadutilslib.get_single_run(args.group, args.project, args.build, args.device_name, args.build_name, args.suite_name, args.test_name, args.debug)

    if build_cmdline == None:
        print("couldn't find what I wanted")
        return None

    bisect_script = f"""#!/bin/bash
{build_cmdline}
"""

    filename = f'single-run-{build.version}-{args.project}-{args.device_name}-{args.build_name}-{args.suite_name}.sh'

    Path(filename).write_text(bisect_script, encoding="utf-8")

    print(f"{bisect_script}")
    print(f"file created: {filename}")

    return True

if __name__ == "__main__":
    sys.exit(run())
