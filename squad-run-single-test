#!/usr/bin/python3
# -*- coding: utf-8 -*-
# vim: set ts=4
#
# Copyright 2022-present Linaro Limited
#
# SPDX-License-Identifier: MIT


import argparse
import logging
import os
import re
import sys
import requests
from pathlib import Path
from squad_client.core.api import SquadApi
from squad_client.core.models import Squad, Build, TestRun
from squad_client.shortcuts import download_tests as download
from squad_client.shortcuts import get_build
from squad_client.utils import getid, first

squad_host_url = "https://qa-reports.linaro.org/"
SquadApi.configure(cache=3600, url=os.getenv("SQUAD_HOST",squad_host_url))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def get_file(path):
    print(f"Getting file from {path}")
    if re.search(r'https?://', path):
        request = requests.get(path, allow_redirects=True)
        request.raise_for_status()
        filename = path.split('/')[-1]
        with open(filename, 'wb') as f:
            f.write(request.content)
        return filename
    elif os.path.exists(path):
        return path
    else:
        raise Exception(f"Path {path} not found")

def find_good_build(base_build, project, environment, build_name, suite_name, test_name):
    builds = project.builds(id__lt=base_build.id, ordering="-id", count=10).values()
    for build in builds:
        logger.debug(f"Trying to find good test in build \"{build.version}\"")
        for testrun in build.testruns(environment=environment.id).values():
            logger.debug(f"  - Trying to find {build_name} in {testrun.job_url}")
            if build_name == testrun.metadata.build_name:
                logger.debug(f"    - Yay, found it, now looking for a passing {suite_name}/{test_name}")
                candidate_test = first(testrun.tests(metadata__suite=suite_name, metadata__name=test_name))
                if candidate_test is None:
                    logger.debug(f"      - no test in here :(")
                    continue
                if candidate_test.result:
                    logger.debug("************** FOUND IT *************")
                    return build
    return None


def parse_args():
    parser = argparse.ArgumentParser(description="Get a local bisect script within SQUAD")

    parser.add_argument(
        "--group",
        required=True,
        help="squad group",
    )

    parser.add_argument(
        "--project",
        required=True,
        help="squad project",
    )

    parser.add_argument(
        "--build",
        required=True,
        help="squad build",
    )

    parser.add_argument(
        "--device-name",
        required=True,
        help="SQUAD's environment, like 'qemu-arm64'.",
    )

    parser.add_argument(
        "--build-name",
        required=True,
        help="SQUAD's build-name, which is tux's build_name, like 'gcc-12-lkftconfig'.",
    )

    parser.add_argument(
        "--suite-name",
        help="SQUAD's build-name, which is tux's build_name, like 'ltp-syscalls' or 'kselftest-arm64'.",
    )

    parser.add_argument(
        "--test-name",
        required=True,
        help="SQUAD's build-name, which is tux's build_name, like 'fork13' or 'hackbench01'.",
    )

    parser.add_argument(
        "--debug",
        action="store_true",
        default=False,
        help="Display debug messages",
    )

    return parser.parse_args()


def run():
    args = parse_args()
    if args.debug:
        logger.setLevel(level=logging.DEBUG)

    base_group = Squad().group(args.group)
    if base_group is None:
        logger.error(f"Get group failed. Group not found: '{args.group}'.")
        return -1

    base_project = base_group.project(args.project)
    if base_project is None:
        logger.error(f"Get project failed. project not found: '{args.project}'.")
        return -1

    base_build = get_build(args.build, base_project)
    if base_build is None:
        logger.error(f"Get build failed. build not found: '{args.build}'.")
        return -1

    device_name = args.device_name
    build_name = args.build_name
    suite_name = args.test_name
    test_name = args.test_name

    environment = base_project.environment(device_name)
    build = Build(base_build.id)
    suite = base_project.suite(suite_name)
    if suite is None:
        if build_name.endswith('-lkftconfig'):
            suite_name = 'ltp-syscalls'
        suite = base_project.suite(suite_name)

    metadata = first(Squad().suitemetadata(suite=suite_name, name=test_name, kind="test"))
    if metadata is None:
        test = first(build.tests(suite=suite.id, environment=environment.id))
    else:
        test = first(build.tests(metadata=metadata.id, environment=environment.id))

    if test is None:
        print(f"Build \"{build.version}\" has no test \"{test_name}\" available on \"{device_name}\"")
        return -1

    # In theory there should only be one of those
    testrun = TestRun(getid(test.test_run))
    logger.debug(f"Testrun id {testrun.id}")
    download_url = testrun.metadata.download_url
    if download_url is None:
        if testrun.metadata.config is None:
            print("There is no way to determine download_url")
            return -1
        download_url = testrun.metadata.config.replace("config", "")


    build_cmdline = ""
    tuxrun = get_file(f"{testrun.job_url}/reproducer")
    for line in Path(tuxrun).read_text(encoding="utf-8").split("\n"):
        if 'tuxrun --runtime' in line:
            line = re.sub("--tests \S+ ", "", line)
            build_cmdline = os.path.join(build_cmdline + line.strip() + ' --save-outputs --log-file -"').strip()

    build_cmdline = build_cmdline.replace('-"', f'- -- \'cd /opt/ltp && ./runltp -s {test_name}\'')

    bisect_script = f"""#!/bin/bash
{build_cmdline}
"""

    filename = f'bisect-badsha-{build.version}-{device_name}-{build_name}-{suite_name}-{test_name}.sh'

    Path(filename).write_text(bisect_script, encoding="utf-8")

    print(f"{bisect_script}")
    print(f"file created: {filename}")
if __name__ == "__main__":
    sys.exit(run())
